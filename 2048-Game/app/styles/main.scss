// bower:scss
//@import "/app/bower_components/bootstrap-sass-official/vendor/assets/stylesheets/bootstrap.scss";
// endbower

@import "style_helpers";

$width: 400px;
$tile-count:4;
$tile-padding: 15px;
$tile-size:($width - $tile-padding * ($tile-count +1))/$tile-count;
$tile-padding: 15px;
$tile-radius: 3px;
$tile-font: 'Open Sans', sans-serif;
$colors:  #EEE4DA, // 2
          #EAE0C8, // 4
          #F59563, // 8
          #3399ff, // 16
          #ffa333, // 32
          #cef030, // 64
          #E8D8CE, // 128
          #990303, // 256
          #6BA5DE, // 512
          #DCAD60, // 1024
          #B60022; // 2048

$game-container-background: #bbada0;
$tile-color: #eee4da;
$tile-gold-color: #edc22e;
$tile-gold-glow-color: lighten($tile-gold-color, 15%);
$text-color: #776E65;
$bright-text-color: #f9f6f2;

// DON'T EDIT BELOW
//$transition-time: 170ms;
@function power($x, $n){
    $value:1;

    @if $n >= 0{
        @for $i from 1 through $n{
            $value:$value * $x;
        }
    } @else{
          @for $i from $n to 0{
            $value:$value / $x;
        }
      }

      @return $value;
}

.container {
  max-width: 600px;
}

html, body {
  margin: 0;
  padding: 0;

  background: #faf8ef;
  color: $text-color;
  font-family: "Open Sans", "Helvetica Neue", Arial, sans-serif;
  font-size: 18px;
}

h1.title {
   font-size: 40px;
   font-weight: bold;
   margin: 0;
   display: block;
   float: left;
}

.scores-container {
  text-align: right;
  float: right;
}

.score, .high-score {
  $inner-height: 25px;

  min-height: 2.5em;
  min-width: 5em;

  position: relative;
  display: inline-block;
  background: $game-container-background;
  padding: 15px 25px;
  font-size: $inner-height;
  height: $inner-height;
  line-height: $inner-height + 22px;
  font-weight: bold;
  border-radius: 3px;
  color: white;
  margin-top: 8px;
  text-align: center;

  &:after {
    position: absolute;
    width: 100%;
    top: 10px;
    left: 0;
    text-transform: uppercase;
    font-size: 13px;
    line-height: 13px;
    text-align: center;
    color: $tile-color;
  }

  .score-addition {
    position: absolute;
    right: 30px;
    color: red;
    font-size: $inner-height;
    line-height: $inner-height;
    font-weight: bold;
    color: rgba($text-color, .9);
    z-index: 100;
    @include animation(move-up 600ms ease-in);
    @include animation-fill-mode(both);
  }
}

.score:after {
  content: "Score";
}

.high-score:after {
  content: "Best"
}

#instructions {
   padding-top: 0.5em;

   .restart-button {
      margin-top: -0.5em;
      display: inline-block;
   background: #8f7a66;
   border-radius: 3px;
   padding: 0 20px;
   text-decoration: none;
   color: #f9f6f2;
   height: 40px;
   line-height: 42px;
   cursor: pointer;
   display: block;
   text-align: center;
   float: right;
   border: none;
   }
}

#board-container {
   position: relative;
   width: $width;
   height: $width;
   margin: 40px auto;
}

@mixin game-board {
  //$tile-size: ($width - $tile-padding * ($tile-count + 1)) / $tile-count;
  #game-board { 
    position: relative;
    padding: $tile-padding;
    background: #bbaaa0;
    border-radius: 6px;
    width: $width;
    height: $width;
    box-sizing: border-box;

    .grid-container {
      position: absolute;
      z-index: 1;
      margin: 0 auto;

      .grid-cell {
        width: $tile-size;
        height: $tile-size;
        margin-bottom: $tile-padding;
        margin-right: $tile-padding;
        float: left;
        background: rgba(238, 228, 218, 0.35);
      }
    }

    .tile-container {
      position: absolute;
      z-index: 2;
      .tile {
        font-family: $tile-font;
        position: absolute;
        width: $tile-size;
        height: $tile-size;
        -webkit-transition-property: -webkit-transform;
        -moz-transition-property: -moz-transform;
        transition-property: transform;
        z-index: 2;

        @for $x from 1 through $tile-count {
          @for $y from 1 through $tile-count {
            $zeroOffsetX: $x - 1;
            $zeroOffsetY: $y - 1;
            $newX: ($tile-size) * ($zeroOffsetX) + ($tile-padding * $zeroOffsetX);
            $newY: ($tile-size) * ($zeroOffsetY) + ($tile-padding * $zeroOffsetY);

            &.position-#{$zeroOffsetX}-#{$zeroOffsetY} { 
              -webkit-transform:translate($newX,$newY);
                        transform:translate($newX,$newY);
            }
          }
        }

        @for $i from 1 through length($colors) {
          &.tile-#{power(2, $i)} .tile-inner {
            background: nth($colors, $i)
          }
        }
      }
    }
  }
}
